===== 昨天 =====
`Date yesterday = Date.from( LocalDateTime.now().minusDays(1).atZone(ZoneId.systemDefault()).toInstant() );`


===== 三种 =====
{{{#!highlight java
package test.date;

import java.text.SimpleDateFormat;
import java.time.*;
import java.util.Calendar;
import java.util.Date;

/**
 * DateTest
 * <p>
 * <br/>
 *
 * @author apr
 * @date 2021/06/29 08:56:29
 **/
public class LocalDateTest {

    private static ZoneId zone = ZoneId.systemDefault();

    public static void main(String[] args) {
        Date now = new Date();

        //传统用Calendar方式计算日期
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(now);
        calendar.set(Calendar.DAY_OF_MONTH, calendar.get(Calendar.DAY_OF_MONTH) - 30);
        print(calendar.getTime());

        //LocalDate只有日期没有时间
        LocalDate localDateNow = dateToLocalDate(now);
        localDateNow = localDateNow.minusDays(30);
        print( localDateToDate(localDateNow, LocalTime.now()) );

        //LocalTime只有时间没有日期
        LocalTime localTimeNow = dateToLocalTime(now);
        print( localTimeToDate(localTimeNow, LocalDate.now().minusDays(30)) );

        //LocalDateTime既有日期又有时间
        LocalDateTime localDateTimeNow = dateToLocalDateTime(now);
        localDateTimeNow = localDateTimeNow.minusDays(30);
        print( localDateTimeToDate(localDateTimeNow) );
    }

    /**
     * print
     *
     * @param d
     * @return void
     * @author apr
     * @date 2021/6/29 9:20
     */
    private static void print(Date d) {
        System.out.println(new SimpleDateFormat("YYYY-MM-dd hh:mm:ss").format(d));
    }

    /**
     * 1.1 Date -> LocalDate
     *
     * @param date
     * @return java.time.LocalDate
     * @author apr
     * @date 2021/6/29 9:38
     */
    private static LocalDate dateToLocalDate(Date date) {

        Instant instant = date.toInstant();
        LocalDateTime localDateTime = LocalDateTime.ofInstant(instant, zone);

        LocalDate localDate = localDateTime.toLocalDate();
        return localDate;
    }

    /**
     * 1.2.1 LocalDate -> Date
     *
     * @param localDate
     * @return java.util.Date
     * @author apr
     * @date 2021/6/29 9:39
     */
    private static Date localDateToDate(LocalDate localDate) {
        return localDateToDate(localDate, LocalDateTime.now().toLocalTime());
    }

    /**
     * 1.2.2 LocalDate -> Date
     *
     * @param localDate
     * @return java.util.Date
     * @author apr
     * @date 2021/6/29 9:39
     */
    private static Date localDateToDate(LocalDate localDate, LocalTime localTime) {
        //localDate.atStartOfDay()
        LocalDateTime localDateTime = localDate.atTime(localTime);//只有日, 补全时分秒
        Instant instant = localDateTime.atZone(zone).toInstant();

        Date date = Date.from(instant);
        return date;
    }

    /**
     * 2.1 Date -> LocalTime
     *
     * @param date 
     * @return java.time.LocalTime
     * @author apr
     * @date 2021/6/29 9:37
     */
    private static LocalTime dateToLocalTime(Date date) {
        Instant instant = date.toInstant();
        LocalDateTime localDateTime = LocalDateTime.ofInstant(instant, zone);

        LocalTime localTime = localDateTime.toLocalTime();
        return localTime;
    }

    /**
     * 2.2.1 LocalTime -> Date
     *
     * @param localTime 
     * @return java.util.Date
     * @author apr
     * @date 2021/6/29 9:38
     */
    private static Date localTimeToDate(LocalTime localTime) {
        LocalDate localDate = LocalDate.now();
        return localTimeToDate(localTime, localDate);
    }

        /**
     * 2.2.1 LocalTime -> Date
     *
     * @param localTime
     * @return java.util.Date
     * @author apr
     * @date 2021/6/29 9:38
     */
    private static Date localTimeToDate(LocalTime localTime, LocalDate localDate) {
        LocalDateTime localDateTime = LocalDateTime.of(localDate, localTime);

        Instant instant = localDateTime.atZone(zone).toInstant();

        Date date = Date.from(instant);
        return date;
    }

    /**
     * 3.1 Date -> LocalDateTime
     *
     * @param date 
     * @return java.time.LocalDateTime
     * @author apr
     * @date 2021/6/29 9:32
     */
    private static LocalDateTime dateToLocalDateTime(Date date) {
        Instant instant = date.toInstant();

        LocalDateTime localDateTime = LocalDateTime.ofInstant(instant, zone);
        return localDateTime;
    }


    /**
     * 3.2 LocalDateTime -> Date
     *
     * @param localDateTime 
     * @return java.util.Date
     * @author apr
     * @date 2021/6/29 9:38
     */
    private static Date localDateTimeToDate(LocalDateTime localDateTime) {
        Instant instant = localDateTime.atZone(zone).toInstant();

        Date date = Date.from(instant);
        return date;
    }

}
}}}
