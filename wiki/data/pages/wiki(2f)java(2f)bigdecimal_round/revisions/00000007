==== `BigDecimal.ROUND_HALF_XXX`的各种用法 ====

在银行、帐户、计费等领域，`BigDecimal`提供了精确的数值计算。其中8种舍入方式值得掌握。

 * `ROUND_UP` - 舍入远离零的舍入模式
   在丢弃非零部分之前始终增加数字(始终对非零舍弃部分前面的数字加1)。
   ~- 注意，此舍入模式始终不会减少计算值的大小。-~

 * `ROUND_DOWN` - 接近零的舍入模式
   在丢弃某部分之前始终不增加数字(从不对舍弃部分前面的数字加1，即截短)。
   ~- 注意，此舍入模式始终不会增加计算值的大小。-~

 * `ROUND_CEILING` - 接近正无穷大的舍入模式
   如果 BigDecimal 为正，则舍入行为与 ROUND_UP 相同;如果为负，则舍入行为与 ROUND_DOWN 相同。
   ~- 注意，此舍入模式始终不会减少计算值。-~

 * `ROUND_FLOOR` - 接近负无穷大的舍入模式
   如果 BigDecimal 为正，则舍入行为与 ROUND_DOWN 相同;如果为负，则舍入行为与 ROUND_UP 相同。
   ~- 注意，此舍入模式始终不会增加计算值。-~

 * `ROUND_HALF_UP` - 向“最接近的”数字舍入
   如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。如果舍弃部分 >= 0.5，则舍入行为与 ROUND_UP 相同;否则舍入行为与 ROUND_DOWN 相同。
   ~- 注意，这是我们大多数人在小学时就学过的舍入模式(四舍五入)。 -~

 * `ROUND_HALF_DOWN` - 向“最接近的”数字舍入
   如果与两个相邻数字的距离相等，则为上舍入的舍入模式。如果舍弃部分 > 0.5，则舍入行为与 ROUND_UP 相同;否则舍入行为与 ROUND_DOWN 相同(五舍六入)。

 * `ROUND_HALF_EVEN` - 向“最接近的”数字舍入(银行家舍入法)
   如果与两个相邻数字的距离相等，则向相邻的偶数舍入。如果舍弃部分左边的数字为奇数，则舍入行为与 ROUND_HALF_UP 相同;如果为偶数，则舍入行为与 ROUND_HALF_DOWN 相同。
   ~- 注意，在重复进行一系列计算时，此舍入模式可以将累加错误减到最小。 -~
   {{{
    此舍入模式也称为“银行家舍入法”，主要在美国使用。四舍六入，五分两种情况。 如果前一位为奇数，则入位，否则舍去。
    以下例子为保留小数点1位，那么这种舍入方式下的结果。
    1.15>1.2 1.25>1.2
   }}}

 * `ROUND_UNNECESSARY`
   断言请求的操作具有精确的结果，因此不需要舍入。如果对获得精确结果的操作指定此舍入模式，则抛出`ArithmeticException`。

 
==== 扩展 - `java.math.RoundingMode` ====
{{{#!highlight java
package java.math;

public enum RoundingMode {

    UP(BigDecimal.ROUND_UP),

    DOWN(BigDecimal.ROUND_DOWN),

    CEILING(BigDecimal.ROUND_CEILING),

    FLOOR(BigDecimal.ROUND_FLOOR),

    HALF_UP(BigDecimal.ROUND_HALF_UP),

    HALF_DOWN(BigDecimal.ROUND_HALF_DOWN),

    HALF_EVEN(BigDecimal.ROUND_HALF_EVEN),

    UNNECESSARY(BigDecimal.ROUND_UNNECESSARY);

    // Corresponding BigDecimal rounding constant
    final int oldMode;

    /**
     * Constructor
     *
     * @param oldMode The {@code BigDecimal} constant corresponding to
     *        this mode
     */
    private RoundingMode(int oldMode) {
        this.oldMode = oldMode;
    }

    /**
     * Returns the {@code RoundingMode} object corresponding to a
     * legacy integer rounding mode constant in {@link BigDecimal}.
     *
     * @param  rm legacy integer rounding mode to convert
     * @return {@code RoundingMode} corresponding to the given integer.
     * @throws IllegalArgumentException integer is out of range
     */
    public static RoundingMode valueOf(int rm) {
        switch(rm) {

        case BigDecimal.ROUND_UP:
            return UP;

        case BigDecimal.ROUND_DOWN:
            return DOWN;

        case BigDecimal.ROUND_CEILING:
            return CEILING;

        case BigDecimal.ROUND_FLOOR:
            return FLOOR;

        case BigDecimal.ROUND_HALF_UP:
            return HALF_UP;

        case BigDecimal.ROUND_HALF_DOWN:
            return HALF_DOWN;

        case BigDecimal.ROUND_HALF_EVEN:
            return HALF_EVEN;

        case BigDecimal.ROUND_UNNECESSARY:
            return UNNECESSARY;

        default:
            throw new IllegalArgumentException("argument out of range");
        }
    }
}
}}}
