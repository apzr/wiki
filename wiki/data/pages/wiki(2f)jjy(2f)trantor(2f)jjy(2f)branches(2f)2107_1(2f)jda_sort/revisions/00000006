=== 要货单排序 ===

 * 登陆 http://scp-console.test.jjyyx.com/

 * 选择 `SRM门店管理系统` - `门店日常要货` - `要货单列表` 并点击查询

 * 在`NetWork`请求中得到访问接口
 {{{#!highlight json

{singleResult: false, targetModel: "requisition_center_PurchaseRequisition",…}

    dataSource: {actionKey: "requisition_center_PurchaseRequisition_PurchaseRequisition_list"}

    order: {by: "createdAt", isAsc: false}

    paging: {no: 1, size: 10}

    result: {fields: [{fieldName: "id"}, {fieldName: "code"}, {fieldName: "requisitionEntityName"},…]}
        fields: [{fieldName: "id"}, {fieldName: "code"}, {fieldName: "requisitionEntityName"},…]
        singleResult: false
        sourceModel: "requisition_center_PurchaseRequisition"
        targetModel: "requisition_center_PurchaseRequisition"

}}}

 * 根据`actionKey`找到`"actionKey": "requisition_center_PurchaseRequisition_PurchaseRequisitionMultiDataAction"`中的排序方法
 {{{#!highlight java

public class PurchaseRequisitionMultiDataAction implements MultiDataAction<PurchaseRequisition> {

    @Override
    public MultiDataResult<PurchaseRequisition> load(QueryValues queryValues, MultiDataParams multiDataParams) {

                ...
                Select::getAll,
                /***********************************************排序***********************************************/
                new OrderBy(multiDataParams.getOrder().getBy(), multiDataParams.getOrder().getIsAsc()), null, multiDataParams.getPaging().getNo(), multiDataParams.getPaging().getSize());
                /***********************************************排序***********************************************/

                ...

    }

}

}}}

 * 可见目前的排序方法为`order: {by: "createdAt", isAsc: false}`为页面传递的参数
  * 此处如果想做双排序兼容, 要么就在查询前判断查询的数据是drp还是jda的, 直接用不同的SQL去查询出排序好的数据
  * 要么就直接查询时候双方的排序语句都不带, 先随机查询一条数据,根据查询结果的数据格式判断来源是DRP还是JDA, 再请求带排序的SQL



=== 要货单商品行排序 ===
 * 选择 `SRM门店管理系统` - `门店日常要货` - `要货单列表` 并点击查询 - 选择一条数据点击详情

 * 在`NetWork`请求中得到访问接口
 {{{#!highlight json

{singleResult: false, targetModel: "requisition_center_PurchaseLine", dataSource: {type: "DataStore"},…}

    dataSource: {type: "DataStore"}

    order: {by: "lineNumberExt", isAsc: true}

    paging: {no: 1, size: 10}

    related: {field: "purchaseRequisition", recordIds: [17366133]}

    result: {,…}

    singleResult: false

    targetModel: "requisition_center_PurchaseLine"

}}}


在jda同步数据接口中, 商品行数据合单的逻辑后 添加排序方法, 排序之后设置行号即可

参见`DrpOrderServiceImpl::createPR`
 {{{#!highlight java
lineList.sort((o1, o2) -> {
});

for (int i = 0; i < lineList.size; i++) {
    lineList.get(i).set(PurchaseLineExt.lineNumberExt_field, i+1);
}
}}}
